const axios = require('axios'); // Use axios para requisições HTTP

async function transformJson(jsonOriginal) {
    let novoJson = {
        status: "submitted",
        accessed_on: jsonOriginal.accessed_on,
        executed_on: jsonOriginal.executed_on,
        answers: {}
    };

    for (let questionId in jsonOriginal.answers) {
        let question = jsonOriginal.answers[questionId];
        let taskQuestion = jsonOriginal.task.questions.find(q => q.id === parseInt(questionId));

        if (taskQuestion.type === "order-sentences") {
            let answer = taskQuestion.options.sentences.map(sentence => sentence.value);
            novoJson.answers[questionId] = { question_id: question.question_id, question_type: taskQuestion.type, answer: answer };
        } else if (taskQuestion.type === "fill-words") {
            let pre_answer = taskQuestion.options;
            let answer = pre_answer.phrase.filter((_, index) => index % 2 !== 0);
            novoJson.answers[questionId] = { question_id: question.question_id, question_type: taskQuestion.type, answer: answer };
        } else if (taskQuestion.type === "text_ai") {
            let answer = taskQuestion.comment.replace(/<\/?p>/g, '');
            novoJson.answers[questionId] = { question_id: question.question_id, question_type: taskQuestion.type, answer: { "0": answer } };
        } else {
            let answer = Object.fromEntries(Object.keys(taskQuestion.options).map(optionId => [optionId, taskQuestion.options[optionId].answer]));
            novoJson.answers[questionId] = { question_id: question.question_id, question_type: taskQuestion.type, answer: answer };
        }
    }
    return novoJson;
}

async function sendRequest(method, url, data, token) {
    try {
        const response = await axios({
            method: method,
            url: url,
            headers: {
                "X-Api-Key": token,
                "Content-Type": "application/json"
            },
            data: data
        });
        return response.data;
    } catch (error) {
        console.error('Request failed', error);
    }
}

async function handleTask(url) {
    // Obtenção do token diretamente do sessionStorage
    const token = JSON.parse(sessionStorage.getItem("cmsp.ip.tv:iptvdashboard:state")).auth.auth_token;
    const roomName = JSON.parse(sessionStorage.getItem("cmsp.ip.tv:iptvdashboard:state")).room.room.name;
    const id = url.split("/")[6];

    let draftBody = {
        status: "draft",
        accessed_on: "room",
        executed_on: roomName,
        answers: {}
    };

    const initialResponse = await sendRequest("POST", `https://edusp-api.ip.tv/tms/task/${id}/answer`, draftBody, token);
    const taskId = initialResponse.id;

    const getAnswersUrl = `https://edusp-api.ip.tv/tms/task/${id}/answer/${taskId}?with_task=true&with_genre=true&with_questions=true&with_assessed_skills=true`;
    const answersResponse = await sendRequest("GET", getAnswersUrl, null, token);
    
    const sendAnswersBody = await transformJson(answersResponse);
    console.log(`[DEBUG] Sending Answers... BODY: ${JSON.stringify(sendAnswersBody)}`);

    const finalResponse = await sendRequest("PUT", `https://edusp-api.ip.tv/tms/task/${id}/answer/${taskId}`, sendAnswersBody, token);
    if (finalResponse) {
        console.log('Answers sent successfully.');
    }
}

// Exemplo de uso
const url = "https://cmsp.ip.tv/mobile/tms/task/123/apply"; // URL de exemplo
handleTask(url);

// Simulando um ambiente onde este script seria executado

// Regex para detectar a URL da lição
const lessonRegex = /https:\/\/cmsp\.ip\.tv\/mobile\/tms\/task\/\d+\/apply/;

console.log("-- STARTING CMSP CHEETO --");

// Função para transformar JSON
function transformJson(originalJson) {
    const newJson = {
        status: "submitted",
        accessed_on: originalJson.accessed_on,
        executed_on: originalJson.executed_on,
        answers: {}
    };

    for (const questionId in originalJson.answers) {
        const question = originalJson.answers[questionId];
        const taskQuestion = originalJson.task.questions.find(q => q.id === parseInt(questionId));

        if (taskQuestion.type === "order-sentences") {
            const answer = taskQuestion.options.sentences.map(sentence => sentence.value);
            newJson.answers[questionId] = {
                question_id: question.question_id,
                question_type: taskQuestion.type,
                answer: answer
            };
        } else if (taskQuestion.type === "fill-words") {
            const answer = taskQuestion.options.phrase.map(item => item.value);
            newJson.answers[questionId] = {
                question_id: question.question_id,
                question_type: taskQuestion.type,
                answer: answer
            };
        } else if (taskQuestion.type === "text_ai") {
            const answer = taskQuestion.comment.replace(/<\/?p>/g, '');
            newJson.answers[questionId] = {
                question_id: question.question_id,
                question_type: taskQuestion.type,
                answer: { "0": answer }
            };
        } else if (taskQuestion.type === "fill-letters") {
            const answer = taskQuestion.options.answer;
            newJson.answers[questionId] = {
                question_id: question.question_id,
                question_type: taskQuestion.type,
                answer: answer
            };
        } else if (taskQuestion.type === "cloud") {
            const answer = taskQuestion.options.ids;
            newJson.answers[questionId] = {
                question_id: question.question_id,
                question_type: taskQuestion.type,
                answer: answer
            };
        } else {
            const answer = Object.fromEntries(
                Object.keys(taskQuestion.options).map(optionId => [optionId, taskQuestion.options[optionId].answer])
            );
            newJson.answers[questionId] = {
                question_id: question.question_id,
                question_type: taskQuestion.type,
                answer: answer
            };
        }
    }
    return newJson;
}

// Função para enviar requisições
function sendRequest(method, url, data) {
    return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        xhr.open(method, url);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.onload = () => resolve(xhr.responseText);
        xhr.onerror = () => reject('Request failed');
        xhr.send(data ? JSON.stringify(data) : null);
    });
}

// Função principal para monitorar mudanças na URL
function monitorURL() {
    let oldHref = document.location.href;

    const observer = new MutationObserver(() => {
        if (oldHref !== document.location.href) {
            oldHref = document.location.href;
            if (lessonRegex.test(oldHref)) {
                console.log("[DEBUG] LESSON DETECTED");

                // Acesso a dados da sessão (você precisaria adaptar isso)
                const state = JSON.parse(sessionStorage.getItem("cmsp.ip.tv:iptvdashboard:state"));
                const xAuthKey = state.auth.auth_token;
                const roomName = state.room.room.name;
                const id = oldHref.split("/")[6];
                console.log(`[DEBUG] LESSON_ID: ${id} ROOM_NAME: ${roomName}`);

                const draftBody = {
                    status: "draft",
                    accessed_on: "room",
                    executed_on: roomName,
                    answers: {}
                };

                sendRequest("POST", `https://edusp-api.ip.tv/tms/task/${id}/answer`, draftBody)
                    .then(response => {
                        console.log("[DEBUG] DRAFT_DONE, RESPONSE: ", response);
                        const responseJson = JSON.parse(response);
                        const taskId = responseJson.id;
                        const getAnswersUrl = `https://edusp-api.ip.tv/tms/task/${id}/answer/${taskId}?with_task=true&with_genre=true&with_questions=true&with_assessed_skills=true`;

                        console.log("[DEBUG] Getting Answers...");

                        return sendRequest("GET", getAnswersUrl);
                    })
                    .then(response => {
                        console.log(`[DEBUG] GET ANSWERS RESPONSE: ${response}`);
                        const getAnswersResponse = JSON.parse(response);
                        const sendAnswersBody = transformJson(getAnswersResponse);

                        console.log(`[DEBUG] Sending Answers... BODY: ${JSON.stringify(sendAnswersBody)}`);

                        return sendRequest("PUT", `https://edusp-api.ip.tv/tms/task/${id}/answer/${taskId}`, sendAnswersBody);
                    })
                    .then(response => {
                        console.log(`[DEBUG] Answers Sent! RESPONSE: ${response}`);
                    })
                    .catch(error => {
                        console.error(error);
                    });
            }
        }
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
}

// Iniciar monitoramento
monitorURL();
